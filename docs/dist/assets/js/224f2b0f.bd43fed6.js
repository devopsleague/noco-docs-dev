"use strict";(self.webpackChunknoco_docs=self.webpackChunknoco_docs||[]).push([[2562],{60404:(e,d,i)=>{i.r(d),i.d(d,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>s,metadata:()=>t,toc:()=>o});var n=i(85893),r=i(11151);const s={title:"Numeric functions",description:"This article explains various numeric functions that can be used in formula fields.",tags:["Fields","Field types","Formula"],keywords:["Fields","Field types","Formula","Create formula field","Numeric functions"]},l=void 0,t={id:"fields/field-types/formula/numeric-functions",title:"Numeric functions",description:"This article explains various numeric functions that can be used in formula fields.",source:"@site/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md",sourceDirName:"070.fields/040.field-types/060.formula",slug:"/fields/field-types/formula/numeric-functions",permalink:"/fields/field-types/formula/numeric-functions",draft:!1,unlisted:!1,editUrl:"https://github.com/nocodb/nocodb/tree/develop/packages/noco-docs/docs/docs/070.fields/040.field-types/060.formula/020.numeric-functions.md",tags:[{label:"Fields",permalink:"/tags/fields"},{label:"Field types",permalink:"/tags/field-types"},{label:"Formula",permalink:"/tags/formula"}],version:"current",sidebarPosition:20,frontMatter:{title:"Numeric functions",description:"This article explains various numeric functions that can be used in formula fields.",tags:["Fields","Field types","Formula"],keywords:["Fields","Field types","Formula","Create formula field","Numeric functions"]},sidebar:"tutorialSidebar",previous:{title:"Numeric and Logical Operators",permalink:"/fields/field-types/formula/operators"},next:{title:"String functions",permalink:"/fields/field-types/formula/string-functions"}},c={},o=[{value:"Numeric functions",id:"numeric-functions",level:3},{value:"Related Articles",id:"related-articles",level:2}];function h(e){const d={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(d.h3,{id:"numeric-functions",children:"Numeric functions"}),"\n",(0,n.jsxs)(d.table,{children:[(0,n.jsx)(d.thead,{children:(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.th,{children:"Name"}),(0,n.jsx)(d.th,{children:"Syntax"}),(0,n.jsx)(d.th,{children:"Sample"}),(0,n.jsx)(d.th,{children:"Output"})]})}),(0,n.jsxs)(d.tbody,{children:[(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"ABS"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ABS(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ABS({field})"})}),(0,n.jsx)(d.td,{children:"Absolute value of the input parameter"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"ADD"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ADD(value1,[value2,...])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ADD({field1}, {field2})"})}),(0,n.jsx)(d.td,{children:"Sum of input parameters"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"AVG"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"AVG(value1,[value2,...])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"AVG({field1}, {field2})"})}),(0,n.jsx)(d.td,{children:"Average of input parameters"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"CEILING"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"CEILING(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"CEILING({field})"})}),(0,n.jsx)(d.td,{children:"Rounded next largest integer value of input parameter"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"EXP"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"EXP(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"EXP({field})"})}),(0,n.jsxs)(d.td,{children:["Exponential value of input parameter (",(0,n.jsx)(d.code,{children:"e^x"}),")"]})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"FLOOR"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"FLOOR(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"FLOOR({field})"})}),(0,n.jsx)(d.td,{children:"Rounded largest integer less than or equal to input parameter"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"INT"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"INT(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"INT({field})"})}),(0,n.jsx)(d.td,{children:"Integer value of input parameter"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"LOG"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"LOG([base], value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"LOG(10, {field})"})}),(0,n.jsx)(d.td,{children:"Logarithm of input parameter to the base (default = e) specified"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"MAX"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"MAX(value1,[value2,...])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"MAX({field1}, {field2}, {field3})"})}),(0,n.jsx)(d.td,{children:"Maximum value amongst input parameters"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"MIN"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"MIN(value1,[value2,...])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"MIN({field1}, {field2}, {field3})"})}),(0,n.jsx)(d.td,{children:"Minimum value amongst input parameters"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"MOD"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"MOD(value1, value2)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"MOD({field}, 2)"})}),(0,n.jsx)(d.td,{children:"Remainder after integer division of input parameters"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"POWER"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"POWER(base, exponent)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"POWER({field}, 3)"})}),(0,n.jsxs)(d.td,{children:[(0,n.jsx)(d.code,{children:"base"})," to the ",(0,n.jsx)(d.code,{children:"exponent"})," power, as in ",(0,n.jsx)(d.code,{children:"base ^ exponent"})]})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"ROUND"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ROUND(value, precision)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ROUND({field}, 3)"})}),(0,n.jsxs)(d.td,{children:["Round input ",(0,n.jsx)(d.code,{children:"value"})," to decimal place specified by ",(0,n.jsx)(d.code,{children:"precision"})," (Nearest integer if ",(0,n.jsx)(d.code,{children:"precision"})," not provided)"]})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"SQRT"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"SQRT(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"SQRT({field})"})}),(0,n.jsx)(d.td,{children:"Square root of the input parameter"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"COUNT"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"COUNT(value1,[value2,...])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"COUNT({field1},{field2},{field3})"})}),(0,n.jsx)(d.td,{children:"Count the number of arguments that are numbers"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"COUNTA"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"COUNTA(value1,[value2,...])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"COUNTA({field1},{field2},{field3})"})}),(0,n.jsx)(d.td,{children:"Counts the number of non-empty arguments"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"COUNTALL"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"COUNTALL(value1,[value2,...])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"COUNTALL({field1},{field2},{field3})"})}),(0,n.jsx)(d.td,{children:"Counts the number of arguments"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"EVEN"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"EVEN(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"EVEN({field})"})}),(0,n.jsx)(d.td,{children:"Returns the nearest even integer that is greater than or equal to the specified value"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"ODD"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ODD(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ODD({field})"})}),(0,n.jsx)(d.td,{children:"Returns the nearest odd integer that is greater than or equal to the specified value"})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"VALUE"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"VALUE(value)"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"VALUE({field})"})}),(0,n.jsxs)(d.td,{children:["Extract the numeric value from a string, if ",(0,n.jsx)(d.code,{children:"%"})," or ",(0,n.jsx)(d.code,{children:"-"})," is present, it will handle it accordingly and return the numeric value"]})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"ROUNDDOWN"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ROUNDDOWN(value, [precision])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ROUNDDOWN({field}, 2)"})}),(0,n.jsx)(d.td,{children:'Round down the value after the decimal point to the number of decimal places given by "precision"(default is 0)'})]}),(0,n.jsxs)(d.tr,{children:[(0,n.jsx)(d.td,{children:(0,n.jsx)(d.strong,{children:"ROUNDUP"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ROUNDUP(value, [precision])"})}),(0,n.jsx)(d.td,{children:(0,n.jsx)(d.code,{children:"ROUNDUP({field}, 2)"})}),(0,n.jsx)(d.td,{children:'Round up the value after the decimal point to the number of decimal places given by "precision"(default is 0)'})]})]})]}),"\n",(0,n.jsx)(d.h2,{id:"related-articles",children:"Related Articles"}),"\n",(0,n.jsxs)(d.ul,{children:["\n",(0,n.jsx)(d.li,{children:(0,n.jsx)(d.a,{href:"/fields/field-types/formula/operators",children:"Numeric and Logical Operators"})}),"\n",(0,n.jsx)(d.li,{children:(0,n.jsx)(d.a,{href:"/fields/field-types/formula/string-functions",children:"String Functions"})}),"\n",(0,n.jsx)(d.li,{children:(0,n.jsx)(d.a,{href:"/fields/field-types/formula/date-functions",children:"Date Functions"})}),"\n",(0,n.jsx)(d.li,{children:(0,n.jsx)(d.a,{href:"/fields/field-types/formula/conditional-expressions",children:"Conditional Expressions"})}),"\n"]})]})}function a(e={}){const{wrapper:d}={...(0,r.a)(),...e.components};return d?(0,n.jsx)(d,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,d,i)=>{i.d(d,{Z:()=>t,a:()=>l});var n=i(67294);const r={},s=n.createContext(r);function l(e){const d=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(d):{...d,...e}}),[d,e])}function t(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(s.Provider,{value:d},e.children)}}}]);